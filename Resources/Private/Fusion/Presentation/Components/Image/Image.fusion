// presentation component for the image node type
prototype(Flowpack.Neos.WhatsNewDashboard.Editorial:Component.Image) < prototype(Neos.Fusion:Component) {
    image = ''
    imageDescription = ''

    // default class
    class = 'w-full h-full flex flex-col mb-8'

    @propTypes {
        @strict = true
        image = ${PropTypes.string}
        imageDescription = ${PropTypes.string}
        class = ${PropTypes.string}
    }

    @private {
        inBackend = Flowpack.Neos.WhatsNewDashboard.Editorial:Helper.InBackend
    }

    renderer = Neos.Fusion:Tag {
        tagName = "div"
        attributes.class = ${AtomicFusion.classNames(
            props.class
        )}

        content = afx`
            {props.image}
            <Flowpack.Neos.WhatsNewDashboard.Editorial:Component.Image.Description
                imageDescription={props.imageDescription}
            />
        `
    }
}

// single component to only render the image
prototype(Flowpack.Neos.WhatsNewDashboard.Editorial:Component.Image.Only) < prototype(Neos.Fusion:Component) {
    imageSource = null
    imageUri = ''
    // Needed when rendering svg or gifs
    fileExtension = ''

    alternativeText = ''

    // We load all images lazily by default, as the browser is really good at finding what is needed above the fold
    loadEager = false

    // If set to false we prevent this component from rendering a image placeholder in backend when no image is set
    showImagePlaceholder = true

    // These values should match Settings.Media.yaml
    srcSet = ${['370w', '600w', '800w', '1200w', '1600w']}

    // Sizes="100vw" means the image file is swapped out based on the total width of the viewport.
    // This value is only appropriate for full-width images
    // - you should override this for images displayed at smaller sizes.
    sizes = ${['100vw']}

    formats = ${['webp', 'jpg']}

    pictureClasses = ''
    imgClasses = ''

    @propTypes {
        @strict = true
        imageSource = ${PropTypes.instanceOf('\\Sitegeist\\Kaleidoscope\\Domain\\ImageSourceInterface')}
        imageUri = ${PropTypes.string}
        fileExtension = ${PropTypes.string}
        alternativeText = ${PropTypes.string}
        loadEager = ${PropTypes.boolean}
        showImagePlaceholder = ${PropTypes.boolean}
        srcSet = ${PropTypes.arrayOf(PropTypes.string)}
        sizes = ${PropTypes.arrayOf(PropTypes.string)}
        formats = ${PropTypes.arrayOf(PropTypes.string)}
        pictureClasses = ${PropTypes.string}
        imgClasses = ${PropTypes.string}
    }

    @private {
        inBackend = Flowpack.Neos.WhatsNewDashboard.Editorial:Helper.InBackend
    }

    renderer = Neos.Fusion:Case {
        @if.showImage = ${props.imageSource || props.showImagePlaceholder}
        gifOrSvg {
            // WORKAROUND for crashing animated gifs:
            // It seems that if you throw a big animated gif to vips it needs a lot of resources and blocks
            // the php process for a very long time with high cpu utilization.
            // Thats why we do not touch gifs and just output them without any processing.
            // Also added svgs cause they need no different sizes.
            condition = ${props.fileExtension == 'gif' || props.fileExtension == 'svg'}
            renderer = afx`
                <Flowpack.Neos.WhatsNewDashboard.Editorial:Component.ImagePlaceholder
                    @if.showPlaceholder={props.showImagePlaceholder && private.inBackend && !props.imageUri}
                />
                <img
                    src={props.imageUri}
                    alt={props.alternativeText}
                    loading={props.loadEager ? 'eager' : 'lazy'}
                    class={props.imgClasses}
                />
            `
        }

        default {
            condition = true
            renderer = afx`
                <Flowpack.Neos.WhatsNewDashboard.Editorial:Component.ImagePlaceholder
                    @if.showPlaceholder={props.showImagePlaceholder && private.inBackend && !props.imageSource}
                />
                <Sitegeist.Kaleidoscope:Picture
                    @if.showImage={props.imageSource}
                    alt={props.alternativeText}
                    imageSource={props.imageSource}
                    srcset={props.srcSet}
                    sizes={props.sizes}
                    formats={props.formats}
                    renderDimensionAttributes={false}
                    loading={props.loadEager ? 'eager' : 'lazy'}
                    attributes.class={props.pictureClasses}
                    imgAttributes.class={props.imgClasses}
                />
            `
        }
    }
}
